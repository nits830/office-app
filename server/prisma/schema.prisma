


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  phone       String    @unique
  otp         String?
  otpExpiry   DateTime?
  password    String?
  batchYear   Int
  isVerified  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  votes       Vote[]
  isDeleted Boolean  @default(false)
}

model Candidate {
  id          Int         @id @default(autoincrement())
  name        String
  isWinner    Boolean     @default(false)
  remarks     String?
  post        String @default("General")
  election    Election    @relation(fields: [electionId], references: [id])
  electionId  Int
  createdAt   DateTime    @default(now())
  votes       Vote[]
}


// Explanation of Vote model in PROJECT.md
model Vote {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int
  votedYear   Int       // Optional if you prefer to query from Candidate â†’ Election.year
  createdAt   DateTime  @default(now())
  @@unique([userId, votedYear])
}

model Admin {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Election {
  id         Int         @id @default(autoincrement())
  year       Int         @unique         // e.g. 2025, 2026
  startTime  DateTime
  endTime    DateTime
  createdAt  DateTime    @default(now())
  post       String @default("General")
  candidates Candidate[] // All candidates contesting this election
}
